#
# OpenOCD script for RTL8710
# Copyright (C) 2016 Rebane, rebane@alkohol.ee
#

source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME rtl8710
}

if { [info exists ENDIAN] } {
	set _ENDIAN $ENDIAN
} else {
	set _ENDIAN little
}

if { [info exists WORKAREASIZE] } {
	set _WORKAREASIZE $WORKAREASIZE
} else {
	set _WORKAREASIZE 0x800
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x2ba01477
}

swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
dap create ${_TARGETNAME}_dap -chain-position $_TARGETNAME
target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap ${_TARGETNAME}_dap

$_TARGETNAME configure -work-area-phys 0x10001000 -work-area-size $_WORKAREASIZE -work-area-backup 0

adapter_khz 500
adapter_nsrst_delay 100

if {![using_hla]} {
	cortex_m reset_config sysresetreq
}

set rtl8710_flasher_firmware_ptr 0x10001000
set rtl8710_flasher_buffer 0x10008000
set rtl8710_flasher_buffer_size 262144
set rtl8710_flasher_sector_size 4096

array set rtl8710_flasher_code {
	0 0x4FF0E92D 1 0xB671B087 2 0x4C594B58 3 0x4E596B1A 4 0x7240F042 5 0x69DA631A
	6 0xF4424D57 7 0x61DA7280 8 0xF8C322FF 9 0xF8C32120 10 0x4B542124 11 0x47A04798
	12 0xF8DF47B0 13 0x60288170 14 0x47A04F51 15 0x22009601 16 0x601A4B50 17 0x2A00681A
	18 0x4B4FD0FC 19 0xB932681A 20 0x47A0602A 21 0x47989B01 22 0x47A06028 23 0x681AE7EF
	24 0xD10B2A01 25 0x4E4947A0 26 0x47B02006 27 0x47984B48 28 0x47B020C7 29 0x200447A0
	30 0xE7EE47B0 31 0x2A02681A 32 0x47A0D109 33 0x20064E41 34 0x4B4147B0 35 0x68384798
	36 0x47984B40 37 0x681AE7EE 38 0xD1142A03 39 0x47A02600 40 0x9104F8DF 41 0xA000F8D7
	42 0xB0F0F8DF 43 0x2000F8D9 44 0x42B24B39 45 0x000AEB06 46 0xEB06D9CF 47 0x2210010B
	48 0x36104798 49 0x681AE7F2 50 0xD11D2A04 51 0xF8DF2600 52 0xF8DFA0D8 53 0xE01290B8
	54 0x200647A0 55 0x4B2C47C8 56 0x68384798 57 0xF44F492D 58 0x44317280 59 0x44304B2C
	60 0x47A04798 61 0x47C82004 62 0xF50647A0 63 0xF8DA7680 64 0x42B33000 65 0xE79AD8E8
	66 0x2B05681B 67 0x47A0D125 68 0xF8DF2600 69 0xF8DF9094 70 0xF8D9A080 71 0x42B33000
	72 0x6838D98D 73 0xA9022210 74 0x47D04430 75 0x3000F8D9 76 0x1B9B2100 77 0xBF282B10
	78 0x48182310 79 0x4430AA02 80 0xD102428B 81 0x361047A0 82 0xF812E7E7 83 0xF810EB01
	84 0x45E6C001 85 0x3101D105 86 0x2301E7F2 87 0x3000F8C8 88 0x2301E76D 89 0x3000F8C8
	90 0xE768602E 91 0x40000200 92 0x10001395 93 0x10001269 94 0x1000800C 95 0x100011C5
	96 0x10008010 97 0x10008000 98 0x10008004 99 0x100012D9 100 0x100013A5 101 0x100012F9
	102 0x1000120D 103 0x10008020 104 0x10001331 105 0x10008008 106 0x10008014 107 0x6A534A04
	108 0x030BF3C3 109 0xD0FA2B00 110 0x0060F892 111 0xBF004770 112 0x40006000 113 0x21014B10
	114 0xF4426B1A 115 0x631A7240 116 0xF042691A 117 0x611A0210 118 0x20C0F8D3 119 0x0206F022
	120 0x20C0F8C3 121 0x20C0F8D3 122 0x0201F042 123 0x20C0F8C3 124 0xF5032200 125 0x609A43BC
	126 0x611962DA 127 0x61592102 128 0x61DA619A 129 0x477064DA 130 0x40000200 131 0x4615B5F8
	132 0x2A10B31A 133 0x7240F44F 134 0xBF284C11 135 0x60222510 136 0x60652203 137 0x2060F884
	138 0x4207F3C0 139 0x2060F884 140 0x2207F3C0 141 0x2060F884 142 0xB2C02201 143 0xF8844F09
	144 0x194E0060 145 0x47B860A2 146 0x0B01F801 147 0xD1FA428E 148 0xF0136AA3 149 0xD1FB0301
	150 0x462860A3 151 0xBF00BDF8 152 0x40006000 153 0x100011AD 154 0x7340F44F 155 0xB570490C
	156 0x2303600B 157 0x2301604B 158 0x239F608B 159 0xF8814C09 160 0x47A03060 161 0x47A04605
	162 0x47A04606 163 0xEA400400 164 0x43282006 165 0xF0136A8B 166 0xD1FB0301 167 0xBD70608B
	168 0x40006000 169 0x100011AD 170 0xF44FB508 171 0x49087340 172 0x2301600B 173 0x608B604B
	174 0xF8812305 175 0x4B053060 176 0x6A8B4798 177 0x0301F013 178 0x608BD1FB 179 0xBF00BD08
	180 0x40006000 181 0x100011AD 182 0x7280F44F 183 0x601A4B05 184 0x609A2201 185 0x0060F883
	186 0xF0126A9A 187 0xD1FB0201 188 0x4770609A 189 0x40006000 190 0x7280F44F 191 0x601A4B0B
	192 0x609A2201 193 0xF8832220 194 0xF3C02060 195 0xF8834207 196 0xF3C02060 197 0xB2C02207
	198 0x2060F883 199 0x0060F883 200 0xF0126A9A 201 0xD1FB0201 202 0x4770609A 203 0x40006000
	204 0xB35AB570 205 0x7480F44F 206 0xF5B24B15 207 0x601C7F80 208 0x0401F04F 209 0xF04F609C
	210 0xF8830402 211 0xF3C04060 212 0xF8834407 213 0xBF284060 214 0x7280F44F 215 0x2407F3C0
	216 0xF883B2C0 217 0x461D4060 218 0x0060F883 219 0x188C4618 220 0x6B01F811 221 0xF88542A1
	222 0xD1F96060 223 0x07496A99 224 0x6A83D5FC 225 0x0301F013 226 0x6083D1FB 227 0xBD704610
	228 0x40006000 229 0x4C02B510 230 0x07C347A0 231 0xBD10D4FC 232 0x100012A9 233 0x4C02B510
	234 0x078347A0 235 0xBD10D5FC 236 0x100012A9
}

set rtl8710_flasher_command_read_id      0
set rtl8710_flasher_command_mass_erase   1
set rtl8710_flasher_command_sector_erase 2
set rtl8710_flasher_command_read         3
set rtl8710_flasher_command_write        4
set rtl8710_flasher_command_verify       5

set rtl8710_flasher_mac_address_offset   0xA088

set rtl8710_flasher_ready                0
set rtl8710_flasher_capacity             0
set rtl8710_flasher_auto_erase           0
set rtl8710_flasher_auto_verify          0
set rtl8710_flasher_auto_erase_sector    0xFFFFFFFF

proc rtl8710_flasher_init {} {
	global rtl8710_flasher_firmware_ptr
	global rtl8710_flasher_buffer
	global rtl8710_flasher_capacity
	global rtl8710_flasher_ready
	global rtl8710_flasher_code

	if {[expr {$rtl8710_flasher_ready == 0}]} {
		echo "initializing RTL8710 flasher"
		halt
		mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
		mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
		array2mem rtl8710_flasher_code 32 $rtl8710_flasher_firmware_ptr [array size rtl8710_flasher_code]
		reg faultmask 0x01
		reg sp 0x20000000
		reg pc $rtl8710_flasher_firmware_ptr
		resume
		rtl8710_flasher_wait
		set id [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
		set rtl8710_flasher_capacity [expr {2 ** [expr {($id >> 16) & 0xFF}]}]
		set rtl8710_flasher_ready 1
		echo "RTL8710 flasher initialized"
	}
	return ""
}

proc rtl8710_flasher_mrw {reg} {
	set value ""
	mem2array value 32 $reg 1
	return $value(0)
}

proc rtl8710_flasher_wait {} {
	global rtl8710_flasher_buffer
	while {[rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x00}]]} { }
}

proc rtl8710_flasher_load_block {local_filename offset len} {
	global rtl8710_flasher_buffer
	load_image $local_filename [expr {$rtl8710_flasher_buffer + 0x20 - $offset}] bin [expr {$rtl8710_flasher_buffer + 0x20}] $len
}

proc rtl8710_flasher_read_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_read
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_read
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		error "read error, offset $offset"
	}
}

proc rtl8710_flasher_write_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_write
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_write
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		error "write error, offset $offset"
	}
}

proc rtl8710_flasher_verify_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_verify
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_verify
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
		set status [expr {$status + $offset}]
		error "verify error, offset $status"
	}
}

proc rtl8710_flash_read_id {} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_capacity
	global rtl8710_flasher_command_read_id
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_read_id
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set id [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
	set manufacturer_id [format "0x%02X" [expr {$id & 0xFF}]]
	set memory_type [format "0x%02X" [expr {($id >> 8) & 0xFF}]]
	set memory_capacity [expr {2 ** [expr {($id >> 16) & 0xFF}]}]
	echo "manufacturer ID: $manufacturer_id, memory type: $memory_type, memory capacity: $memory_capacity bytes"
}

proc rtl8710_flash_mass_erase {} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_mass_erase
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_mass_erase
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
}

proc rtl8710_flash_sector_erase {offset} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_sector_erase
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_sector_erase
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
}

proc rtl8710_flash_read {local_filename loc size} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_buffer_size
	rtl8710_flasher_init
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "read offset $flash_offset"
		rtl8710_flasher_read_block $flash_offset $len
		dump_image /tmp/_rtl8710_flasher.bin [expr {$rtl8710_flasher_buffer + 0x20}] $len
		exec dd conv=notrunc if=/tmp/_rtl8710_flasher.bin "of=$local_filename" bs=1 "seek=$offset"
		echo "read $len bytes"
	}
}

proc rtl8710_flash_write {local_filename loc} {
	global rtl8710_flasher_buffer_size
	global rtl8710_flasher_sector_size
	global rtl8710_flasher_auto_erase
	global rtl8710_flasher_auto_verify
	global rtl8710_flasher_auto_erase_sector
	rtl8710_flasher_init
	set sector 0
	set size [file size $local_filename]
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "write offset $flash_offset"
		rtl8710_flasher_load_block $local_filename $offset $len
		if {[expr {$rtl8710_flasher_auto_erase != 0}]} {
			for {set i $flash_offset} {$i < [expr {$flash_offset + $len}]} {incr i} {
				set sector [expr {$i / $rtl8710_flasher_sector_size}]
				if {[expr {$rtl8710_flasher_auto_erase_sector != $sector}]} {
					echo "erase sector $sector"
					rtl8710_flash_sector_erase [expr {$sector * $rtl8710_flasher_sector_size}]
					set rtl8710_flasher_auto_erase_sector $sector
				}
			}
		}
		rtl8710_flasher_write_block $flash_offset $len
		echo "wrote $len bytes"
		if {[expr {$rtl8710_flasher_auto_verify != 0}]} {
			echo "verify offset $flash_offset"
			rtl8710_flasher_verify_block $flash_offset $len
		}
	}
}

proc rtl8710_flash_verify {local_filename loc} {
	global rtl8710_flasher_buffer_size
	rtl8710_flasher_init
	set size [file size $local_filename]
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "read offset $flash_offset"
		rtl8710_flasher_load_block $local_filename $offset $len
		echo "verify offset $flash_offset"
		rtl8710_flasher_verify_block $flash_offset $len
	}
}

proc rtl8710_flash_read_mac {} {
	global rtl8710_flasher_mac_address_offset
	global rtl8710_flasher_buffer
	rtl8710_flasher_init
	rtl8710_flasher_read_block $rtl8710_flasher_mac_address_offset 6
	set mac ""
	mem2array mac 8 [expr {$rtl8710_flasher_buffer + 0x20}] 6
	set res "MAC address: "
	append res [format %02X $mac(0)]
	append res ":" [format %02X $mac(1)]
	append res ":" [format %02X $mac(2)]
	append res ":" [format %02X $mac(3)]
	append res ":" [format %02X $mac(4)]
	append res ":" [format %02X $mac(5)]
	echo $res
}

proc rtl8710_flash_auto_erase {on} {
	global rtl8710_flasher_auto_erase
	if {[expr {$on != 0}]} {
		set rtl8710_flasher_auto_erase 1
		echo "auto erase on"
	} else {
		set rtl8710_flasher_auto_erase 0
		echo "auto erase off"
	}
}

proc rtl8710_flash_auto_verify {on} {
	global rtl8710_flasher_auto_verify
	if {[expr {$on != 0}]} {
		set rtl8710_flasher_auto_verify 1
		echo "auto verify on"
	} else {
		set rtl8710_flasher_auto_verify 0
		echo "auto verify off"
	}
}

proc rtl8710_reboot {} {
	mww 0xE000ED0C 0x05FA0007
}

